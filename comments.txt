COMP30024 Project Part A
By Angus Huang and Tejas Cherukara

Pseudocode


Main Program
Read in a game board from input and generate a representation of it.
Print out the number of moves for the horizontal player.
Print out the number of moves for the vertical player.


Reading in the game board
Read in the dimension of the board n.
Create an n by n collection of cell states.
For n^2 cell inputs:
	Add the cell to the collection.
	If the cell is a game piece:
		Add the piece to its player’s list of pieces.
For each game piece:
	For each allowed direction of the piece:
		Generate the move that would result from the piece going in that
direction.
If move is valid relative to the board:
	Add it to the piece’s move list.


Checking if a move is valid relative to the board
If the destination and starting positions are within the board, the starting
position is that of a game piece moving in a valid direction and the
destination isn’t blocked:
The move is valid.
Else:
	The move is invalid.


Printing out the number of moves for a player x
Count := 0;
For each of x’s pieces p:
	Count := Count + p.moves.length;
Print(Count);


Time Complexity
Let n be the number of rows of the game board.
Thus we have 2(n-1) number of game pieces and n^2 cells.
Reading in a game board is O(n^2) since processing each cell is constant.
Then we have to generate the legal moves for each game piece. We know there are 2(n-1) game 
pieces and for each piece, they have at most 3 available moves. Checking if a move is legal is 
constant (only have to check the starting position and destination position). This means that altogether, 
this would be O(n). The running total would be O(n^2) + O(n) which reduces to O(n^2).

Lastly, we must get the number of moves available for each player. To do this, we must query all 2(n-1) 
game pieces and check how many moves they have available (at most 3). This action is O(n), and so altogether 
the program has a time complexity of O(n^2).
