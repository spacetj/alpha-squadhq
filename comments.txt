COMP30024 Project Part B
By Angus Huang and Tejas Cherukara

------------------------------------------------------------------------------------
Structure
------------------------------------------------------------------------------------
ActionValuePair: A pair consisting of moves and values, used by AIMA
Angush: The player class which implements the interface needed by the referee
CellState: Enumeration of possible cell states
Direction: Enumeration of possible directions
TurnState: Enumeration of turn states, also used for player and terminal states
GameBoard: Representation of the board, along with board-specific functions like
    calculation of the heuristic
GamePiece: Representation of a piece on the board, contains things like position and
    possible moves
Move: Representation of a move
SliderAIPlayer: Subclass of the AIMA implementation of the search strategy which
    allows for us to plug in our heuristics
SliderGame: Representation of a Game used by AIMA

------------------------------------------------------------------------------------
Third Party Libraries
------------------------------------------------------------------------------------
We are making use of the AIMA Core library for its implementation of iterative
deepening alpha beta search.

------------------------------------------------------------------------------------
Search Strategy
------------------------------------------------------------------------------------
Our search strategy was iterative deepening alpha beta search. This algorithm
provides benefits over DFS in that it works well within time constraints like BFS,
but uses far less memory than BFS.

------------------------------------------------------------------------------------
Evaluation Function
------------------------------------------------------------------------------------
The evaluation function is comprised of the following features:
a. Distance to victory
The minimum number of moves to win, assuming the opponent stays still.
The formula isn't particularly intelligent when deciding if blocking is the best
option, as that requires checking the minimum moves to the end edge (ignoring all
blocking pieces) for the piece(s) being blocked against the minimum moves to the
end edge for the piece(s) doing the blocking, which was deemed to be not worth the
time/effort required.

b. Distance to loss
The minimum number of moves to lose, assuming you stay still.

c. Average "Forward" position
Takes the average forward position (so the column positions for horizontal and
row for vertical) normalised for the size of the board. This is used to weight
forward moves over lateral moves.

The overall function is: (b) - (a) + (c)

------------------------------------------------------------------------------------
Additional Comments
------------------------------------------------------------------------------------
To think up strategies to apply, we played and analysed some rounds of the game in
person. This led to the conclusion that the game was probably one where the first
player wins.

In order to get some evidence, we wrote up a program to generate the entire tree
for the game, and then outputted the optimum move tree for a player. With this
information (which totalled around 1GB for a 4 dimension board), it was shown that
in almost every configuration, the first player could force a win. At this point,
we considered making our bot concede immediately if it were the second player, but
decided that this was too fatalistic.

We used our huge move trees to find some common themes in the optimum play. There
were some seemingly unstoppable strategies for certain configurations, but overall
there seemed to be one theme in picking a move: pick a move that increases the
opponent's distance to victory, or one that decreases our distance to victory.
